package org.lz1aq.dlinecontroller;


import java.awt.Dimension;
import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JToggleButton;
import javax.swing.Timer;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import org.lz1aq.dlinecontroller.DLineApplicationState.AntennaDirections;

/**
 *
 * @author Chavdar
 */
public class DLineApplication extends javax.swing.JFrame {   
    
    private static final long serialVersionUID = 1L;
    
    static final int MIN_SWITCHING_SPEED_IN_MS = 150;
    static final int DEFAULT_SWITCHING_SPEED_IN_MS = 2000;
    static final int MAX_SWITCHING_SPEED_IN_MS = 60000;

    private final DLineApplicationState     dLineApplicationState;
    private final DLineApplicationSettings  dLineSettings;
    private final DLineSerialComm           dLineSerialComm;
    
    private final DefaultComboBoxModel  comPortComboBoxModel;
    private final DefaultComboBoxModel  baudRateComboBoxModel;
    private final DefaultComboBoxModel  deviceIdComboBoxModel;
   
    static final int MIN_FB_SWITCHING_RATIO = 1;
    static final int DEFAULT_FB_SWITCHING_RATIO = 3; 
    static final int MAX_FB_SWITCHING_RATIO = 10;
    private int fbSwitchingRatio = DEFAULT_FB_SWITCHING_RATIO;
    private int counter3to1ratio = 0;
    
    private Timer timerForDirectionSwitching;    
    private final ActionListener directionSwitching = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt)
            {
              if(jRadioButtonAllDirections.isSelected())
              {
                toggleAllDirections();
              }
              else
              {
                // Plus dirctions will be equal or longer than the Minus directions 
                // where fbSwitchingRatio specifies the ratio
                if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected() ||
                   getAntennaDirectionButton(AntennaDirections.plusX).isSelected())
                {
                  //skip two time intervals
                  counter3to1ratio++;
                  if(counter3to1ratio<fbSwitchingRatio)
                    return;
                  else
                    counter3to1ratio = 0;
                }
                toggleFrontAndBack();
                
              }
            }
    };        
   
    
    
    /**
     * Creates new form DLineApplication
     */
    public DLineApplication() 
    {  
        // Data for the Combo boxes in the settings Dialog
        this.baudRateComboBoxModel = new DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200" });
        this.comPortComboBoxModel  = DLineSerialComm.getComportsComboboxModel();
        this.deviceIdComboBoxModel = new DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"});
                
        // Load user settings from the properties file
        dLineSettings = new DLineApplicationSettings();
        // Init the DLineState object
        dLineApplicationState = new DLineApplicationState();
        
        // Create the object which will take care of sending data through the UART
        dLineSerialComm = new DLineSerialComm();
        
        // Print the working path and the 
        System.out.println("Working Directory = " +
                System.getProperty("user.dir"));
        System.out.println("java.library.path = " + System.getProperty("java.library.path"));
        //System.setProperty("java.library.path", yourPath); // not used 
        
        // Init GUI
        initComponents();    
        
        
        // Set initial state of the buttons
        pressDefaulButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialogSettings = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jFormattedTextFieldMinusX = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonNorthWest = new javax.swing.JRadioButton();
        jFormattedTextFieldPlusX = new javax.swing.JFormattedTextField();
        jFormattedTextFieldMinusY = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jFormattedTextFieldPlusY = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButtonNorth = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxDeviceId = new javax.swing.JComboBox();
        jComboBoxComPort = new javax.swing.JComboBox();
        jComboBoxBaudRate = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
    jLabel18 = new javax.swing.JLabel();
    jTextFieldCustomCommPort = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jButtonCancel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jCheckBoxSingleElementMode = new javax.swing.JCheckBox();
        buttonGroupInSettings = new javax.swing.ButtonGroup();
        buttonGroupDirections = new javax.swing.ButtonGroup();
        jDialogRelaySwitching = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabelDebugMode = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextFieldDebugSwitchingSpeed = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jRadioButtonAllDirections = new javax.swing.JRadioButton();
        jRadioButtonFrontBack = new javax.swing.JRadioButton();
        jTextFieldFBRatio = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jDialogAbout = new javax.swing.JDialog();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        buttonGroupDebugWindow = new javax.swing.ButtonGroup();
        jPanel11 = new javax.swing.JPanel();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton9 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jPanel12 = new javax.swing.JPanel();
        jToggleButtonAntennaType = new javax.swing.JToggleButton();
        jLabelSerialComm = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuSettigns = new javax.swing.JMenuItem();
        jMenuDebugMode = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jDialogSettings.setTitle("Settings");
        jDialogSettings.setAlwaysOnTop(true);
        jDialogSettings.setModal(true);
        jDialogSettings.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jDialogSettingsComponentShown(evt);
            }
        });
        jDialogSettings.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Button settings"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jFormattedTextFieldMinusX.setText("jFormattedTextField5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        jPanel3.add(jFormattedTextFieldMinusX, gridBagConstraints);

        jLabel6.setText("-X:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        buttonGroupInSettings.add(jRadioButtonNorthWest);
        jRadioButtonNorthWest.setText("NW-SE orientation");
        jRadioButtonNorthWest.setToolTipText("NorthWest-SouthEast");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 5);
        jPanel3.add(jRadioButtonNorthWest, gridBagConstraints);

        jFormattedTextFieldPlusX.setText("jFormattedTextField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel3.add(jFormattedTextFieldPlusX, gridBagConstraints);

        jFormattedTextFieldMinusY.setText("jFormattedTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel3.add(jFormattedTextFieldMinusY, gridBagConstraints);

        jLabel5.setText("+X:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        jFormattedTextFieldPlusY.setText("jFormattedTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jFormattedTextFieldPlusY, gridBagConstraints);

        jLabel8.setText("-Y:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel8, gridBagConstraints);

        jLabel4.setText("+Y:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jLabel3.setText("Labels of direction buttons:");
        jLabel3.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel3.add(jLabel3, gridBagConstraints);

        jLabel2.setText("Button orientation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jLabel2, gridBagConstraints);

        buttonGroupInSettings.add(jRadioButtonNorth);
        jRadioButtonNorth.setText("N-S orientation");
        jRadioButtonNorth.setToolTipText("North-South");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jRadioButtonNorth, gridBagConstraints);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Labels of antenna button:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel3.add(jLabel15, gridBagConstraints);

        jLabel16.setText("ant 1:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel16, gridBagConstraints);

        jTextField2.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jTextField2, gridBagConstraints);

        jLabel17.setText("ant 2:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel17, gridBagConstraints);

        jTextField4.setText("jTextField4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel3.add(jTextField4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CommPort settings"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jComboBoxDeviceId.setModel(deviceIdComboBoxModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel4.add(jComboBoxDeviceId, gridBagConstraints);

        jComboBoxComPort.setModel(this.comPortComboBoxModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel4.add(jComboBoxComPort, gridBagConstraints);

        jComboBoxBaudRate.setModel(this.getBaudRateComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel4.add(jComboBoxBaudRate, gridBagConstraints);

        jLabel7.setText("Device ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jLabel7, gridBagConstraints);

        jLabel12.setText("CommPort name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Baud rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel4.add(jLabel13, gridBagConstraints);

    jLabel18.setText("Custom ComPort name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel4.add(jLabel18, gridBagConstraints);

    jTextFieldCustomCommPort.setText("jTextField5");
    jTextFieldCustomCommPort.setToolTipText("Make sure this field is empty if you don't want to use a custom comport!");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel4.add(jTextFieldCustomCommPort, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel5.add(jButtonCancel, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 2);
        jPanel5.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel5, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Other"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jCheckBoxSingleElementMode.setText("Single element mode");
        jCheckBoxSingleElementMode.setToolTipText("If checked this will set bit6 to TRUE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        jPanel6.add(jCheckBoxSingleElementMode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialogSettings.getContentPane().add(jPanel1, gridBagConstraints);

        jDialogRelaySwitching.setTitle("Debug mode");
        jDialogRelaySwitching.setAlwaysOnTop(true);
        jDialogRelaySwitching.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        jDialogRelaySwitching.setResizable(false);
        jDialogRelaySwitching.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jDialogRelaySwitchingComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jDialogRelaySwitchingComponentShown(evt);
            }
        });

        jLabelDebugMode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelDebugMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDebugMode.setText("Direction is changed every:");
        jLabelDebugMode.setToolTipText("");

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextFieldDebugSwitchingSpeed.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDebugSwitchingSpeed.setText("2000");
        jTextFieldDebugSwitchingSpeed.setToolTipText("Enter integer value [150 to 60000] and press Enter");
        jTextFieldDebugSwitchingSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDebugSwitchingSpeedActionPerformed(evt);
            }
        });
        jTextFieldDebugSwitchingSpeed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDebugSwitchingSpeedKeyPressed(evt);
            }
        });

        jLabel9.setText("msecs");

        buttonGroupDebugWindow.add(jRadioButtonAllDirections);
        jRadioButtonAllDirections.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jRadioButtonAllDirections.setSelected(true);
        jRadioButtonAllDirections.setText("Toggle all four directions");

        buttonGroupDebugWindow.add(jRadioButtonFrontBack);
        jRadioButtonFrontBack.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jRadioButtonFrontBack.setText("Toggle F/B");
        jRadioButtonFrontBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFrontBackActionPerformed(evt);
            }
        });

        jTextFieldFBRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFBRatio.setText("3");
        jTextFieldFBRatio.setToolTipText("Enter integer value [1 to 10] and press Enter");
        jTextFieldFBRatio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldFBRatioKeyPressed(evt);
            }
        });

        jLabel1.setText("Ratio");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelDebugMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDebugSwitchingSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9))
                    .addComponent(jRadioButtonAllDirections)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButtonFrontBack)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextFieldFBRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDebugMode, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDebugSwitchingSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonAllDirections)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonFrontBack)
                    .addComponent(jTextFieldFBRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialogRelaySwitchingLayout = new javax.swing.GroupLayout(jDialogRelaySwitching.getContentPane());
        jDialogRelaySwitching.getContentPane().setLayout(jDialogRelaySwitchingLayout);
        jDialogRelaySwitchingLayout.setHorizontalGroup(
            jDialogRelaySwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialogRelaySwitchingLayout.setVerticalGroup(
            jDialogRelaySwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDialogAbout.setTitle("About");
        jDialogAbout.setAlwaysOnTop(true);
        jDialogAbout.setModal(true);
        jDialogAbout.setResizable(false);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Source code available at ");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("www.active-antenna.eu");
        jTextField1.setToolTipText("");
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("by LZ1AQ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Serial Interface to LZ1AQ's DLine Controller ");

        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("github.com/potty-dzmeia/DLineController");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogAboutLayout = new javax.swing.GroupLayout(jDialogAbout.getContentPane());
        jDialogAbout.getContentPane().setLayout(jDialogAboutLayout);
        jDialogAboutLayout.setHorizontalGroup(
            jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField3)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogAboutLayout.setVerticalGroup(
            jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(30, 30, 30)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Interface to LZ1AQ's DLine Controller");
        setMinimumSize(new java.awt.Dimension(200, 200));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel11.setLayout(new java.awt.GridLayout(3, 3));

        buttonGroupDirections.add(jToggleButton7);
        jToggleButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton7.setText("+Y");
        jToggleButton7.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton7.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton7ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton7);

        buttonGroupDirections.add(jToggleButton8);
        jToggleButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton8.setText("+Y");
        jToggleButton8.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton8.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton8ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton8);

        buttonGroupDirections.add(jToggleButton9);
        jToggleButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton9.setText("-X");
        jToggleButton9.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton9.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton9ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton9);

        buttonGroupDirections.add(jToggleButton4);
        jToggleButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton4.setText("+X");
        jToggleButton4.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton4.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton4ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton4);

        jToggleButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton5.setText("Add");
        jToggleButton5.setToolTipText("");
        jToggleButton5.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton5.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton5ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton5);

        buttonGroupDirections.add(jToggleButton6);
        jToggleButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton6.setText("-X");
        jToggleButton6.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton6.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton6ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton6);

        buttonGroupDirections.add(jToggleButton1);
        jToggleButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton1.setText("+X");
        jToggleButton1.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton1.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton1ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton1);

        buttonGroupDirections.add(jToggleButton2);
        jToggleButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton2.setText("-Y");
        jToggleButton2.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton2.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton2ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton2);

        buttonGroupDirections.add(jToggleButton3);
        jToggleButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton3.setText("-Y");
        jToggleButton3.setMinimumSize(new java.awt.Dimension(0, 0));
        jToggleButton3.setPreferredSize(new java.awt.Dimension(40, 40));
        jToggleButton3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton3ItemStateChanged(evt);
            }
        });
        jPanel11.add(jToggleButton3);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jToggleButtonAntennaType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButtonAntennaType.setText("Antenna Type");
        jToggleButtonAntennaType.setToolTipText("Antenna type");
        jToggleButtonAntennaType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonAntennaTypeItemStateChanged(evt);
            }
        });
        jPanel12.add(jToggleButtonAntennaType, java.awt.BorderLayout.CENTER);

        jLabelSerialComm.setText("Serial Comm:");
        jLabelSerialComm.setMinimumSize(null);
        jLabelSerialComm.setPreferredSize(null);
        jPanel12.add(jLabelSerialComm, java.awt.BorderLayout.PAGE_END);
        jLabelSerialComm.getAccessibleContext().setAccessibleName("jLabelSerialComm");
        jLabelSerialComm.getAccessibleContext().setAccessibleDescription("");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileMenuKeyPressed(evt);
            }
        });

        jMenuSettigns.setText("Settings");
        jMenuSettigns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettignsActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuSettigns);

        jMenuDebugMode.setText("Debug mode");
        jMenuDebugMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDebugModeActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuDebugMode);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileMenuKeyPressed
        
    }//GEN-LAST:event_fileMenuKeyPressed

    private void jDialogSettingsComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogSettingsComponentShown
    {//GEN-HEADEREND:event_jDialogSettingsComponentShown
        // Settings dialog is shown and we need to set the states of the controls
        loadUserSettings();
    }//GEN-LAST:event_jDialogSettingsComponentShown

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        // Set the desired buttons orientation and labels  
        setButtonsOrientation();
        setDirectionButtonsLabels();
        setAntennaButtonLabel();
        dLineApplicationState.setSingleElementMode(dLineSettings.isSingleElementMode());
        // Read last used JFrame dimensions and restore it
        this.setBounds(dLineSettings.getJFrameDimensions());
        
    }//GEN-LAST:event_formWindowOpened

    private void jToggleButton7ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton7ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton7ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.plusY);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton7ItemStateChanged

    private void jToggleButton8ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton8ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton8ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.plusY);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton8ItemStateChanged

    private void jToggleButton9ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton9ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton9ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.minusX);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton9ItemStateChanged

    private void jToggleButton6ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton6ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton6ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.minusX);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton6ItemStateChanged

    private void jToggleButton3ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton3ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton3ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.minusY);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton3ItemStateChanged

    private void jToggleButton2ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton2ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton2ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.minusY);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton2ItemStateChanged

    private void jToggleButton1ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton1ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton1ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.plusX);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton1ItemStateChanged

    private void jToggleButton5ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton5ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton5ItemStateChanged
      if (evt.getStateChange() == ItemEvent.SELECTED)
      {
        dLineApplicationState.setAntennaMode(DLineApplicationState.AntennaModes.additive);
        jToggleButton5.setText(DLineApplicationState.AntennaModes.additive.toString());
        setJFrameTitleToShowCurrentState();
        sendSerialCommand();
      } else
      {
        dLineApplicationState.setAntennaMode(DLineApplicationState.AntennaModes.subtractive);
        jToggleButton5.setText(DLineApplicationState.AntennaModes.subtractive.toString());
        setJFrameTitleToShowCurrentState();
        sendSerialCommand();
      }
    }//GEN-LAST:event_jToggleButton5ItemStateChanged

    private void jToggleButtonAntennaTypeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButtonAntennaTypeItemStateChanged
    {//GEN-HEADEREND:event_jToggleButtonAntennaTypeItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaType(DLineApplicationState.AntennaTypes.antenna_2);
           jToggleButtonAntennaType.setText(dLineSettings.getLabelAnt2());
           setJFrameTitleToShowCurrentState();
        } 
        else if(evt.getStateChange()==ItemEvent.DESELECTED)
        {
           dLineApplicationState.setAntennaType(DLineApplicationState.AntennaTypes.antenna_1);
           jToggleButtonAntennaType.setText(dLineSettings.getLabelAnt1());
           setJFrameTitleToShowCurrentState();
        }
        
        sendSerialCommand();
    }//GEN-LAST:event_jToggleButtonAntennaTypeItemStateChanged

    private void jToggleButton4ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jToggleButton4ItemStateChanged
    {//GEN-HEADEREND:event_jToggleButton4ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
           dLineApplicationState.setAntennaDirection(AntennaDirections.plusX);
           setJFrameTitleToShowCurrentState();
           sendSerialCommand();
        } 
    }//GEN-LAST:event_jToggleButton4ItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // Before closing we need to save the dimensions of the JFrame
        if(this.getExtendedState()==MAXIMIZED_BOTH)
            return; // do not save if maximized
        dLineSettings.setJFrameDimensions(this.getBounds());
        dLineSettings.SaveSettingsToDisk();
        
        dLineSerialComm.close();
    }//GEN-LAST:event_formWindowClosing

    private void jDialogRelaySwitchingComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogRelaySwitchingComponentShown
    {//GEN-HEADEREND:event_jDialogRelaySwitchingComponentShown
        int speed = Integer.parseInt(jTextFieldDebugSwitchingSpeed.getText());
        
        // Star the timer responsible for direction switching
        timerForDirectionSwitching = new Timer(speed, directionSwitching);
        timerForDirectionSwitching.setRepeats(true);
        timerForDirectionSwitching.start();
    }//GEN-LAST:event_jDialogRelaySwitchingComponentShown

    private void jDialogRelaySwitchingComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogRelaySwitchingComponentHidden
    {//GEN-HEADEREND:event_jDialogRelaySwitchingComponentHidden
        timerForDirectionSwitching.stop();
    }//GEN-LAST:event_jDialogRelaySwitchingComponentHidden

    private void jTextFieldDebugSwitchingSpeedKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldDebugSwitchingSpeedKeyPressed
    {//GEN-HEADEREND:event_jTextFieldDebugSwitchingSpeedKeyPressed
        if(evt.getKeyCode() != Event.ENTER)
            return;
        
        int speed = DEFAULT_SWITCHING_SPEED_IN_MS;
        try
        {
            speed = Integer.parseInt(jTextFieldDebugSwitchingSpeed.getText());
        }
        catch (Exception exc)
        {
            jTextFieldDebugSwitchingSpeed.setText(Integer.toString(DEFAULT_SWITCHING_SPEED_IN_MS));
        }
        
        if (speed > MAX_SWITCHING_SPEED_IN_MS)
        {
            speed = MAX_SWITCHING_SPEED_IN_MS;
            jTextFieldDebugSwitchingSpeed.setText(Integer.toString(speed));
        }
        else if(speed<MIN_SWITCHING_SPEED_IN_MS)
        {
            speed = MIN_SWITCHING_SPEED_IN_MS;  
            jTextFieldDebugSwitchingSpeed.setText(Integer.toString(speed));
        }

        timerForDirectionSwitching.setDelay(speed);        
    }//GEN-LAST:event_jTextFieldDebugSwitchingSpeedKeyPressed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitMenuItemActionPerformed
        dLineSerialComm.close();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuSettignsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSettignsActionPerformed
    {//GEN-HEADEREND:event_jMenuSettignsActionPerformed
        jDialogSettings.pack();
        jDialogSettings.setVisible(true);
    }//GEN-LAST:event_jMenuSettignsActionPerformed

    private void jMenuDebugModeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuDebugModeActionPerformed
    {//GEN-HEADEREND:event_jMenuDebugModeActionPerformed
        jDialogRelaySwitching.pack();
        jDialogRelaySwitching.setVisible(true);
    }//GEN-LAST:event_jMenuDebugModeActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        jDialogAbout.pack();
        jDialogAbout.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        jDialogRelaySwitching.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        jDialogAbout.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonCancelActionPerformed
        jDialogSettings.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveActionPerformed
        jDialogSettings.setVisible(false); // Hide the SettingsDialog
        saveUserSettings(); // Read the state of the controls and save them
        setDirectionButtonsLabels();
        setAntennaButtonLabel();
        setButtonsOrientation();
        dLineApplicationState.setSingleElementMode(dLineSettings.isSingleElementMode());
    }//GEN-LAST:event_jButtonSaveActionPerformed

  private void jRadioButtonFrontBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonFrontBackActionPerformed
  {//GEN-HEADEREND:event_jRadioButtonFrontBackActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jRadioButtonFrontBackActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField3ActionPerformed
    {//GEN-HEADEREND:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

  private void jTextFieldDebugSwitchingSpeedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldDebugSwitchingSpeedActionPerformed
  {//GEN-HEADEREND:event_jTextFieldDebugSwitchingSpeedActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jTextFieldDebugSwitchingSpeedActionPerformed

  private void jTextFieldFBRatioKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldFBRatioKeyPressed
  {//GEN-HEADEREND:event_jTextFieldFBRatioKeyPressed
    if (evt.getKeyCode() != Event.ENTER)
    {
      return;
    }

    int ratio = DEFAULT_FB_SWITCHING_RATIO;
    try
    {
      ratio = Integer.parseInt(jTextFieldFBRatio.getText());
    } catch (Exception exc)
    {
      jTextFieldFBRatio.setText(Integer.toString(DEFAULT_FB_SWITCHING_RATIO));
    }

    if (ratio > MAX_FB_SWITCHING_RATIO)
    {
      jTextFieldFBRatio.setText(Integer.toString(MAX_FB_SWITCHING_RATIO));
    } 
    else if (ratio < MIN_FB_SWITCHING_RATIO)
    {
      jTextFieldFBRatio.setText(Integer.toString(MIN_FB_SWITCHING_RATIO));
    }
    
    fbSwitchingRatio = ratio;
    
  }//GEN-LAST:event_jTextFieldFBRatioKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DLineApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DLineApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DLineApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DLineApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DLineApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroupDebugWindow;
    private javax.swing.ButtonGroup buttonGroupDirections;
    private javax.swing.ButtonGroup buttonGroupInSettings;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxSingleElementMode;
    private javax.swing.JComboBox jComboBoxBaudRate;
    private javax.swing.JComboBox jComboBoxComPort;
    private javax.swing.JComboBox jComboBoxDeviceId;
    private javax.swing.JDialog jDialogAbout;
    private javax.swing.JDialog jDialogRelaySwitching;
    private javax.swing.JDialog jDialogSettings;
    private javax.swing.JFormattedTextField jFormattedTextFieldMinusX;
    private javax.swing.JFormattedTextField jFormattedTextFieldMinusY;
    private javax.swing.JFormattedTextField jFormattedTextFieldPlusX;
    private javax.swing.JFormattedTextField jFormattedTextFieldPlusY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
  private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelDebugMode;
    private javax.swing.JLabel jLabelSerialComm;
    private javax.swing.JMenuItem jMenuDebugMode;
    private javax.swing.JMenuItem jMenuSettigns;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButtonAllDirections;
    private javax.swing.JRadioButton jRadioButtonFrontBack;
    private javax.swing.JRadioButton jRadioButtonNorth;
    private javax.swing.JRadioButton jRadioButtonNorthWest;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
  private javax.swing.JTextField jTextFieldCustomCommPort;
    private javax.swing.JTextField jTextFieldDebugSwitchingSpeed;
    private javax.swing.JTextField jTextFieldFBRatio;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    private javax.swing.JToggleButton jToggleButtonAntennaType;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

  public DefaultComboBoxModel getBaudRateComboBoxModel()
  {
    return baudRateComboBoxModel;
  }

  /* Sets the labels of the direction buttons.*/
  private void setDirectionButtonsLabels()
  {
    jToggleButton7.setText(dLineSettings.getLabelPlusY());
    jToggleButton9.setText(dLineSettings.getLabelPlusX());
    jToggleButton3.setText(dLineSettings.getLabelMinusY());
    jToggleButton1.setText(dLineSettings.getLabelMinusX());
    jToggleButton8.setText(dLineSettings.getLabelPlusY());
    jToggleButton6.setText(dLineSettings.getLabelMinusX());
    jToggleButton4.setText(dLineSettings.getLabelPlusX());
    jToggleButton2.setText(dLineSettings.getLabelMinusY());
  }
  
  
  private void setAntennaButtonLabel()
  {
    if(jToggleButtonAntennaType.isSelected() == false)
    {
      jToggleButtonAntennaType.setText(dLineSettings.getLabelAnt1());
    }
    else
    {
      jToggleButtonAntennaType.setText(dLineSettings.getLabelAnt2());
    }
  }

  /**
   * Enables and disables the desired direction button set depending on the
   * orientation stored in dLineSettings. <br>
   */
  private void setButtonsOrientation()
  {
    if (dLineSettings.getButtonOrientation() == DLineApplicationSettings.ButtonOrientation.North)
    {
      jToggleButton7.setVisible(false);
      jToggleButton9.setVisible(false);
      jToggleButton3.setVisible(false);
      jToggleButton1.setVisible(false);
      jToggleButton8.setVisible(true);
      jToggleButton6.setVisible(true);
      jToggleButton4.setVisible(true);
      jToggleButton2.setVisible(true);
    } else
    {
      jToggleButton7.setVisible(true);
      jToggleButton9.setVisible(true);
      jToggleButton3.setVisible(true);
      jToggleButton1.setVisible(true);
      jToggleButton8.setVisible(false);
      jToggleButton6.setVisible(false);
      jToggleButton4.setVisible(false);
      jToggleButton2.setVisible(false);
    }

  }

  /**
   * Sends a command to the DLine Controller device. The command represents the
   * current state of the Java application.
   */
  private void sendSerialCommand()
  {
    try
    {
      // Send the command to the DLine Controller device
      dLineSerialComm.sendCommand(dLineSettings.getComPort(),
              Integer.parseInt(dLineSettings.getBaudRate()),
              Byte.parseByte(dLineSettings.getDeviceId()),
              dLineApplicationState.getState());
      // Draw the command being send at the bottom of the jFrame
      final Dimension size = jLabelSerialComm.getPreferredSize();
      jLabelSerialComm.setMinimumSize(size);
      jLabelSerialComm.setPreferredSize(size);
      jLabelSerialComm.setText(dLineSettings.getComPort() + ": " + String.format("%8s", Integer.toBinaryString(dLineApplicationState.getState())).replace(" ", "0"));
    } catch (Exception ex)
    {
      // Draw debug info at the bottom of the jFrame
      final Dimension size = jLabelSerialComm.getPreferredSize();
      jLabelSerialComm.setMinimumSize(size);
      jLabelSerialComm.setPreferredSize(size);
      jLabelSerialComm.setText(dLineSettings.getComPort() + ": " + ex.toString());
      Logger.getLogger(DLineApplication.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  /**
   * Sets the title of the JFrame to show the currently selected antenna and
   * direction. <br>
   * For example: "Loop: +Y(additive)" quite low 
   */
  private void setJFrameTitleToShowCurrentState()
  {
    String type;
    String mode;
    String direction;

    // Read antenna Type
    switch (dLineApplicationState.getAntennaType())
    {
      case antenna_1:
        type = dLineSettings.getLabelAnt1();
        break;
      case antenna_2:
      default:
        type = dLineSettings.getLabelAnt2();
        break;
    }
    
    // Read antenna Mode
    mode = "(" + dLineApplicationState.getAntennaMode().toString() + ")"; 
  

    // Read the antenna Direction
    switch (dLineApplicationState.getAntennaDirection())
    {
      case plusY:
        direction = dLineSettings.getLabelPlusY();
        break;
      case minusY:
        direction = dLineSettings.getLabelMinusY();
        break;
      case plusX:
        direction = dLineSettings.getLabelPlusX();
        break;
      case minusX:
      default:  
        direction = dLineSettings.getLabelMinusX();
        break;
    }

    this.setTitle(type+": "+direction+mode);
  }

  /**
   * This presses "+Y", "Add" and the "antenna type" button  
   */
  private void pressDefaulButtons()
  {
    // press +Y
    getAntennaDirectionButton(AntennaDirections.plusY).setSelected(true);
    // press Add
    jToggleButton5.setSelected(true);
    // press antenna type button
    jToggleButtonAntennaType.setSelected(true);
  }
  

  /**
   * When called this will change the current direction to the opposite of
   * the current one (i.e. Front and Back)
   */
  private void toggleFrontAndBack()
  {
    if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.minusY).setSelected(true);
    }
    else if(getAntennaDirectionButton(AntennaDirections.minusX).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.plusX).setSelected(true);
    }
    else if(getAntennaDirectionButton(AntennaDirections.minusY).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.plusY).setSelected(true);
    }
    else // plusX
    {
      getAntennaDirectionButton(AntennaDirections.minusX).setSelected(true);
    }
  }
  
  
  /**
   * When called this function will change the current direction (clockwise)
   */
  private void toggleAllDirections()
  {
    if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.minusX).setSelected(true);
    }
    else if(getAntennaDirectionButton(AntennaDirections.minusX).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.minusY).setSelected(true);
    }
    else if(getAntennaDirectionButton(AntennaDirections.minusY).isSelected())
    {
      getAntennaDirectionButton(AntennaDirections.plusX).setSelected(true);
    }
    else
    {
      getAntennaDirectionButton(AntennaDirections.plusY).setSelected(true);
    }
  }

  
  /**
   * User has closed the setting dialog and we need to save the state of the
   * controls
   */
  private void saveUserSettings()
  {
    dLineSettings.setDeviceId(jComboBoxDeviceId.getSelectedItem().toString());

    if (jRadioButtonNorth.isSelected())
    {
      dLineSettings.setButtonOrientation(DLineApplicationSettings.ButtonOrientation.North);
    } else
    {
      dLineSettings.setButtonOrientation(DLineApplicationSettings.ButtonOrientation.NorthWest);
    }
    
    // In case there is CustomComPort defined we will use it...
    if(!jTextFieldCustomCommPort.getText().isEmpty())
    {
      dLineSettings.setComPort(jTextFieldCustomCommPort.getText());
    }
    else
    {
      if (jComboBoxComPort.getSelectedItem() != null)
      {
        dLineSettings.setComPort(jComboBoxComPort.getSelectedItem().toString());
      }
    }
    
    dLineSettings.setBaudRate(jComboBoxBaudRate.getSelectedItem().toString());

    // Store direction button texts
    dLineSettings.setLabelPlusY(jFormattedTextFieldPlusY.getText());
    dLineSettings.setLabelMinusY(jFormattedTextFieldMinusY.getText());
    dLineSettings.setLabelPlusX(jFormattedTextFieldPlusX.getText());
    dLineSettings.setLabelMinusX(jFormattedTextFieldMinusX.getText());
    
    // Store antenna button texts
    dLineSettings.setLabelAnt1(jTextField2.getText());
    dLineSettings.setLabelAnt2(jTextField4.getText());
    
    // 
    dLineSettings.setSingleElementMode(jCheckBoxSingleElementMode.isSelected());
    
    dLineSettings.SaveSettingsToDisk();
  }

  
  
  /**
   * User has opened the setting dialog and we need to load the state of the
   * controls
   */
  private void loadUserSettings()
  {
    jComboBoxDeviceId.setSelectedItem(dLineSettings.getDeviceId());

    if (dLineSettings.getButtonOrientation() == DLineApplicationSettings.ButtonOrientation.North)
    {
      jRadioButtonNorth.setSelected(true);
      jRadioButtonNorthWest.setSelected(false);
    } else
    {
      jRadioButtonNorth.setSelected(false);
      jRadioButtonNorthWest.setSelected(true);
    }

    // If standart ComPort is set...
    if(comPortComboBoxModel.getIndexOf(dLineSettings.getComPort()) >= 0)
    {
      jComboBoxComPort.setSelectedItem(dLineSettings.getComPort());
      jTextFieldCustomCommPort.setText(""); // Custom 
    }
    else
    {
      jTextFieldCustomCommPort.setText(dLineSettings.getComPort());
    }
           
    
    jComboBoxBaudRate.setSelectedItem(dLineSettings.getBaudRate());

    // Direction buttons text       
    jFormattedTextFieldPlusY.setText(dLineSettings.getLabelPlusY());
    jFormattedTextFieldMinusY.setText(dLineSettings.getLabelMinusY());
    jFormattedTextFieldPlusX.setText(dLineSettings.getLabelPlusX());
    jFormattedTextFieldMinusX.setText(dLineSettings.getLabelMinusX());
    
    // Antenna button texts
    jTextField2.setText(dLineSettings.getLabelAnt1());
    jTextField4.setText(dLineSettings.getLabelAnt2());
    
    //
    jCheckBoxSingleElementMode.setSelected(dLineSettings.isSingleElementMode());
  }
  
  
  
  private JToggleButton getAntennaDirectionButton(AntennaDirections button)
  {
    if(dLineSettings.getButtonOrientation() == DLineApplicationSettings.ButtonOrientation.NorthWest)
    {
      switch(button) 
      {
        case plusY:
          return jToggleButton7;
        case minusX:
          return jToggleButton9;
        case minusY:
          return jToggleButton3;
        case plusX:
          return jToggleButton1;
      }
    }
   
    switch (button)
    {
      case plusY:
        return jToggleButton8;
      case minusX:
        return jToggleButton6;
      case minusY:
        return jToggleButton2;
      default:
        System.err.print("Error!");
      case plusX:
        return jToggleButton4;
    }
  }
}
